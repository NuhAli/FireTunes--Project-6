{"version":3,"sources":["util/Spotify.js","components/Header/Header.jsx","components/MobileNavPlaylist/MobileNavPlaylist.jsx","components/MobileNav/MobileNav.jsx","components/PlayList/PlayList.jsx","components/Track/Track.jsx","components/TrackList/TrackList.jsx","components/SearchResults/SearchResults.jsx","components/NewPlaylist/NewPlayList.jsx","components/ExistingPlaylist/ExistingPlaylist.jsx","App.js","index.js"],"names":["accessToken","Header","props","className","onClick","onclick","MobileNavPlaylist","window","addEventListener","setTimeout","getPlaylists","playLists","this","playlists","map","playlist","to","key","id","clear","getPlaylistInfo","handleMenuToggle","name","Component","MobileNav","menuToggle","PlayList","Math","random","Track","state","selected","addNewTrack","bind","removeNewTrack","renderIcon","setState","addTrack","track","removeTrack","isRemoval","existingPlaylist","style","display","title","artist","album","duration","TrackList","searchResults","tracks","SearchResults","searchQuery","searchTrack","handleSearchQuery","search","event","target","value","type","placeholder","onChange","NewPlayList","handleNameChange","playlistTracks","savePlaylist","listOfUris","ExistingPlaylist","info","millisToMinutesAndSeconds","millis","minutes","floor","seconds","toFixed","Spotify","getAccessToken","accessTokenMatch","location","href","match","expirationTimeMatch","expiresIn","Number","history","pushState","accessUrl","process","term","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","duration_ms","uri","trackUris","length","alert","userId","method","body","JSON","stringify","playListId","uris","ok","Error","item","App","existingPlaylistName","existingPlaylistInfo","playlistName","clearCurrent","searchList","uriList","find","result","updatedUriList","push","newTracklist","filter","newPlaylist","setInterval","reload","results","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be56c33e.chunk.js","sourcesContent":["const clientId = process.env.REACT_APP_SECRET_KEY;\r\nconst redirectUri = 'https://nuhali.github.io/FireTunes--Project-6/'\r\nlet accessToken\r\n\r\n// Function converts milliseconds unit to minutes:seconds\r\nconst millisToMinutesAndSeconds = (millis) => {\r\n    let minutes = Math.floor(millis / 60000);\r\n    let seconds = ((millis % 60000) / 1000).toFixed(0);\r\n    return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\r\n}\r\n\r\n// Spotify module that containes all the functions needed to interface with the Spotify API.\r\nconst Spotify = {\r\n    // This function gets a spotify access token via implict grant authorization process, scopes: playlist-modify-public,playlist-read-private,playlist-read-collaborative\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken\r\n        }\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\r\n        const expirationTimeMatch = window.location.href.match(/expires_in=([^&]*)/)\r\n\r\n        if (accessTokenMatch && expirationTimeMatch) {\r\n            accessToken = accessTokenMatch[1]\r\n            const expiresIn = Number(expirationTimeMatch[1])\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/')\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public%20playlist-read-private%20playlist-read-collaborative&redirect_uri=${redirectUri}`\r\n            window.location = accessUrl\r\n        }\r\n    },\r\n\r\n    // Function uses the fetch(get) API to retrieves data related to a string passed in.\r\n    async search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track&market=US&limit=15`, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(\r\n            response => {\r\n                return response.json()\r\n            }\r\n        ).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return []\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                title: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                duration: millisToMinutesAndSeconds(track.duration_ms),\r\n                id: track.id,\r\n                uri: track.uri\r\n            }))\r\n        })\r\n    },\r\n    // Function takes in 2 parameters, which are playlist name(string) and an array of track uris to save a playlist to spotify using the fetch(post).\r\n    async savePlaylist(name, trackUris) {\r\n        const accessToken = Spotify.getAccessToken()\r\n        const headers = {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n        let userId;\r\n        if (!name || !trackUris.length) {\r\n            alert('Please make sure to enter a name and at least one track from the search results.')\r\n        }\r\n        return fetch('https://api.spotify.com/v1/me', {\r\n                headers: headers\r\n            }).then(response => response.json())\r\n            .then(jsonResponse => {\r\n                userId = jsonResponse.id\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                        headers: headers,\r\n                        method: 'POST',\r\n                        body: JSON.stringify({\r\n                            name: name,\r\n                            \"description\": \"Playlist created by Fire Tunes using the Spotify API\",\r\n                            \"public\": true\r\n                        })\r\n                    }).then(response => response.json())\r\n                    .then(jsonResponse => {\r\n                        let playListId = jsonResponse.id\r\n                        return fetch(`https://api.spotify.com/v1/playlists/${playListId}/tracks`, {\r\n                            headers: headers,\r\n                            method: 'POST',\r\n                            body: JSON.stringify({\r\n                                uris: trackUris\r\n                            })\r\n                        })\r\n                    })\r\n            })\r\n    },\r\n    // This function returns a list of all the users private and public playlists on Spotify.\r\n    async getPlaylists(){\r\n        const accessToken = Spotify.getAccessToken()\r\n        const headers = {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n        return fetch('https://api.spotify.com/v1/me/playlists',{\r\n            headers: headers\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json()\r\n            } throw new Error(\"Request failed\")\r\n        }).then(jsonResponse => {\r\n            let result = jsonResponse.items.map(item => {\r\n                return {\r\n                    name: item.name,\r\n                    id: item.id\r\n                }\r\n            })\r\n            return result\r\n        })\r\n    },\r\n\r\n    // This function returns an array of objects which contain the information of all the tracks associated with the playlist passed in as a parameter.\r\n    async getPlaylistInfo(playListId) {\r\n        const accessToken = Spotify.getAccessToken()\r\n        const headers = {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n        return fetch(`https://api.spotify.com/v1/playlists/${playListId}`,{\r\n            headers: headers\r\n        }).then(response => {\r\n            if(response.ok){\r\n                return response.json()\r\n            } else {\r\n                alert(\"Failed here\")\r\n            }\r\n        }).then(jsonResponse => {\r\n            if(!jsonResponse.tracks){\r\n                return\r\n            } else {\r\n                const playlistInfo = jsonResponse.tracks.items.map(item => {\r\n                    return ({\r\n                        id: playListId,\r\n                        title: item.track.name,\r\n                        artist:item.track.album.artists[0].name,\r\n                        album: item.track.album.name,\r\n                        duration: millisToMinutesAndSeconds(item.track.duration_ms),\r\n                        uri: item.track.uri\r\n                    })\r\n                })\r\n                return playlistInfo\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify","import React from 'react'\r\nimport './Header.scss'\r\nimport { AiOutlineFire } from 'react-icons/ai'\r\nimport {FaBars} from 'react-icons/fa';\r\n\r\n// Header Component(functional)\r\nconst Header = (props) => {\r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <div className=\"menu-toggle\">\r\n                    <FaBars className=\"menu-icon\" onClick={props.onclick} />\r\n                </div>\r\n                <div className=\"title\">\r\n                    <h1>\r\n                        FireTunes\r\n                    </h1>\r\n                </div>\r\n                <div className=\"title-icon\">\r\n                    <AiOutlineFire className=\"react-icons\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"border-bottom\">\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport './MobileNavPlaylist.scss'\r\nimport { BiListPlus } from 'react-icons/bi'\r\n\r\nclass MobileNavPlaylist extends Component {\r\n\r\n    render() {\r\n        window.addEventListener('load', () => {\r\n            setTimeout(() => {\r\n                this.props.getPlaylists()\r\n            }, 500);\r\n        })\r\n        const playLists = this.props.playlists.map(playlist => {\r\n            return (\r\n                <Link to=\"/playlistname\" key={playlist.id}  >\r\n                    <div className=\"list-item\" onClick={() => {\r\n                        this.props.clear()\r\n                        setTimeout(() => {\r\n                            this.props.getPlaylistInfo(playlist.id)\r\n                        }, 500);\r\n                        this.props.handleMenuToggle()\r\n                    }}>\r\n                        <div className=\"hover-effect\"></div>\r\n                        <li>{playlist.name}</li>\r\n                    </div>\r\n                </Link>\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"playlist\">\r\n                <h4 className=\"section-title\">\r\n                    Your Playlists\r\n                </h4>\r\n                <ul className=\"playlist-list\">\r\n                    {playLists}\r\n                </ul>\r\n                <div className=\"button-area\">\r\n                    <Link to=\"/\">\r\n                        <button className=\"cta\" onClick={this.props.handleMenuToggle}>\r\n                            New playlist <BiListPlus />\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MobileNavPlaylist;\r\n","import React from 'react'\r\nimport './MobileNav.scss'\r\nimport MobileNavPlaylist from '../MobileNavPlaylist/MobileNavPlaylist'\r\n\r\n// Mobile navigation component (functional)\r\nexport const MobileNav = (props) => {\r\n    return (\r\n        <nav className={props.menuToggle? \"active\": \"unactive\"}>\r\n            <MobileNavPlaylist\r\n            menuToggle={props.menuToggle}\r\n            playlists={props.playlists}\r\n            getPlaylists={props.getPlaylists}\r\n            getPlaylistInfo={props.getPlaylistInfo}\r\n            clear={props.clear}\r\n            handleMenuToggle={props.handleMenuToggle}\r\n            />\r\n        </nav>\r\n        \r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport './PlayList.scss'\r\nimport { BiListPlus } from 'react-icons/bi'\r\n\r\n// Playlist component (class)\r\nclass PlayList extends Component {\r\n    render() {\r\n        // Gets user playlist after 500ms after window loads\r\n        window.addEventListener('load', () => {\r\n            setTimeout(() => {\r\n                this.props.getPlaylists()\r\n            }, 500);\r\n        })\r\n        // Maps through array of objects that contain user playlist information.\r\n        const playLists = this.props.playlists.map(playlist => {\r\n            return (\r\n                <Link to=\"/playlistname\" key={`${Math.random()}`} >\r\n                    <div className=\"list-item\"  onClick={() => {\r\n                        this.props.clear()\r\n                        setTimeout(() => {\r\n                            this.props.getPlaylistInfo(playlist.id)\r\n                        }, 500);\r\n                    }}>\r\n                        <div className=\"hover-effect\"></div>\r\n                        <li>{playlist.name}</li>\r\n                    </div>\r\n                </Link>\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"playlist\">\r\n                <h4 className=\"section-title\">\r\n                    Your Playlists\r\n                </h4>\r\n                <ul className=\"playlist-list\">\r\n                    {playLists}\r\n                </ul>\r\n                <div className=\"button-area\">\r\n                    <Link to=\"/\">\r\n                        <button className=\"cta\">\r\n                            New playlist <BiListPlus />\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayList;\r\n","import React, { Component } from 'react';\r\nimport {IoMdAddCircleOutline,IoMdRemoveCircleOutline} from 'react-icons/io'\r\nimport './Track.scss'\r\n\r\n// Track component (class)\r\nclass Track extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            selected: false\r\n        }\r\n        this.addNewTrack = this.addNewTrack.bind(this)\r\n        this.removeNewTrack = this.removeNewTrack.bind(this)\r\n        this.renderIcon = this.renderIcon.bind(this)\r\n    }\r\n    // Toggles the selected state true.\r\n    addNewTrack(){\r\n        this.setState(\r\n            {\r\n                selected: true\r\n            }\r\n        )\r\n        this.props.addTrack(this.props.track)\r\n    }\r\n    // Function is used to pass parameter into the remove track function.\r\n    removeNewTrack(){\r\n        this.props.removeTrack(this.props.track)\r\n    }\r\n\r\n    // Function used to render the appropriate icon\r\n    renderIcon(){\r\n        if(this.props.isRemoval && !this.props.existingPlaylist){\r\n            return(\r\n                <td className=\"status\">\r\n                        <IoMdRemoveCircleOutline\r\n                            className=\"icon\"\r\n                            onClick={this.removeNewTrack}\r\n                        />\r\n                    </td>\r\n            )\r\n        } else if(!this.props.isRemoval && !this.props.existingPlaylist) {\r\n            return(\r\n                <td className=\"status\">\r\n                        <IoMdAddCircleOutline\r\n                            className=\"icon\"\r\n                            onClick={this.addNewTrack}\r\n                        />\r\n                </td>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <td className=\"status\" style={{display:\"none\"}}>\r\n                        <IoMdAddCircleOutline\r\n                            className=\"icon\"\r\n                            onClick={this.addNewTrack}\r\n                        />\r\n                </td>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr className=\"search-item\">\r\n                <td>{this.props.track.title}</td>\r\n                <td>{this.props.track.artist}</td>\r\n                <td>{this.props.track.album}</td>\r\n                <td>{this.props.track.duration}</td>\r\n                {this.renderIcon()}\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;\r\n\r\n","import React from 'react'\r\nimport './TrackList.scss'\r\nimport Track from '../Track/Track'\r\n\r\n// Tracklist component (functional)\r\nconst TrackList = (props) => {\r\n    \r\n    // Variable is used to capture all the tracks returned from the search function\r\n    const searchResults = props.tracks.map(track => {\r\n        return <Track \r\n                    track={track}\r\n                    key={Math.random()} \r\n                    addTrack={props.addTrack}\r\n                    removeTrack={props.removeTrack}\r\n                    isRemoval={props.isRemoval}\r\n                    existingPlaylist={props.existingPlaylist}\r\n                />\r\n    })\r\n    return (\r\n        <div className=\"results-table-area\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Title</th>\r\n                        <th>Artist</th>\r\n                        <th>Album</th>\r\n                        <th>Duration</th>\r\n                        {\r\n                            props.existingPlaylist? <th className=\"status\" style={{'display':'none'}}>Status</th> : <th className=\"status\">Status</th>\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {searchResults}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrackList\r\n","import React, { Component } from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport { BiSearch } from 'react-icons/bi';\r\nimport './SearchResults.scss'\r\n\r\n\r\n// Search result component (class)\r\nclass SearchResults extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            searchQuery: ''\r\n        }\r\n        this.searchTrack = this.searchTrack.bind(this)\r\n        this.handleSearchQuery = this.handleSearchQuery.bind(this)\r\n    }\r\n    // Function is used to pass in paramters to Spotify.search() function.\r\n    searchTrack() {\r\n        this.props.search(this.state.searchQuery)\r\n    }\r\n    // Stores the string entered into the input elelment as the searchQuery state element\r\n    handleSearchQuery(event) {\r\n        this.setState({\r\n            searchQuery: event.target.value,\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"search-results-area\">\r\n                <div className=\"search-bar\">\r\n                    <input type=\"text\" name=\"searchQuery\" placeholder=\"Search for a song ....\" onChange={this.handleSearchQuery} />\r\n                    <button type=\"button\" className=\"cta\" onClick={this.searchTrack}><BiSearch /></button>\r\n                </div>\r\n                <TrackList\r\n                    tracks={this.props.tracks}\r\n                    addTrack={this.props.addTrack}\r\n                    isRemoval={false}\r\n                    existingPlaylist={false}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react'\r\nimport TrackList from '../TrackList/TrackList'\r\nimport './NewPlaylist.scss'\r\n\r\n// New playlist component(functional)\r\nconst NewPlayList = (props) => {\r\n    // Function used to pass in parameters to the Spotify.search() function\r\n    const save = () => {\r\n        props.savePlaylist(props.playlist,props.listOfUris)\r\n    }\r\n    return (\r\n        <div className=\"newplay-list\">\r\n            <input\r\n            id=\"naming-input\" \r\n            type=\"text\" \r\n            name=\"playListName\"\r\n            placeholder=\"Enter a new playlist name....\"\r\n            onChange={props.handleNameChange}\r\n            />\r\n            <TrackList\r\n                tracks={props.playlistTracks}\r\n                removeTrack={props.removeTrack}\r\n                isRemoval={true}\r\n            />\r\n            <button className=\"cta\" onClick={save} >\r\n                Save to spotify\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPlayList\r\n","import React from 'react'\r\nimport TrackList from '../TrackList/TrackList'\r\nimport './ExistingPlaylist.scss'\r\n\r\n// Existing playlist component(functional)\r\n\r\nconst ExistingPlaylist = (props) => {\r\n    return (\r\n        <div className =\"existing-play-list\">\r\n            <TrackList\r\n                tracks={props.info}\r\n                removeTrack={props.removeTrack}\r\n                isRemoval={true}\r\n                existingPlaylist={true}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExistingPlaylist\r\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport Header from './components/Header/Header'\nimport { MobileNav } from './components/MobileNav/MobileNav'\nimport Playlist from './components/PlayList/PlayList'\nimport SearchResults from './components/SearchResults/SearchResults'\nimport NewPlaylist from './components/NewPlaylist/NewPlayList'\nimport ExistingPlaylist from './components/ExistingPlaylist/ExistingPlaylist'\nimport Spotify from './util/Spotify'\nimport './App.scss';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      playlists: [],\n      tracks: [],\n      existingPlaylistName: [],\n      existingPlaylistInfo: [],\n      playlistName: '',\n      playlistTracks: [],\n      listOfUris: [],\n      menuToggle: false\n    }\n    this.handleMenuToggle = this.handleMenuToggle.bind(this)\n    this.handleNameChange = this.handleNameChange.bind(this)\n    this.handleSearchQuery = this.handleSearchQuery.bind(this)\n    this.addTrack = this.addTrack.bind(this)\n    this.removeTrack = this.removeTrack.bind(this)\n    this.searchTrack = this.searchTrack.bind(this)\n    this.savePlaylist = this.savePlaylist.bind(this)\n    this.getPlaylists = this.getPlaylists.bind(this)\n    this.getPlaylistInfo = this.getPlaylistInfo.bind(this)\n    this.clearCurrent = this.clearCurrent.bind(this)\n  }\n\n  // Captures new playlist name and updates state\n  handleNameChange(event) {\n    this.setState({\n      playlistName: event.target.value,\n    })\n  }\n\n  // Captures the search query that is passed to the Spotify search function\n  handleSearchQuery(event) {\n    this.setState({\n      searchQuery: event.target.value,\n    })\n  }\n\n  // Changes state to toggle the mobile playlist menu\n  handleMenuToggle() {\n    this.setState({\n      menuToggle: !this.state.menuToggle\n    })\n  }\n\n  // Adds track from the search results to the new playlist list\n  addTrack(track) {\n    const searchList = this.state.tracks\n    let uriList = this.state.listOfUris\n    const item = searchList.find(result => result.id === track.id)\n    let updatedUriList = uriList.push(item.uri)\n    const newTracklist = searchList.filter(item => item.id !== track.id)\n    const newPlaylist = [...this.state.playlistTracks, item]\n    this.setState({\n      tracks: newTracklist,\n      playlistTracks: newPlaylist,\n      uriList: updatedUriList\n    })\n  }\n\n  // Removes track from new playlist and adds back to the search results\n  removeTrack(track) {\n    const playList = this.state.playlistTracks\n    const newPlaylist = playList.filter(item => item.id !== track.id)\n    let newTracklist\n    let updatedUriList = this.state.listOfUris.filter(item => item !== track.uri)\n    if(this.state.tracks.length > 0){\n      newTracklist = [...this.state.tracks, track]\n    } else {\n      newTracklist = [...this.state.tracks]\n    }\n    this.setState({\n      tracks: newTracklist,\n      playlistTracks: newPlaylist,\n      listOfUris: updatedUriList\n    })\n  }\n\n  searchTrack(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        tracks: searchResults\n      })\n    })\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.listOfUris\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      alert(`Your playlist \"${this.state.playlistName}\" has been saved to spotify.`)\n      this.setState({\n        playlistName: '',\n        playlistTracks: [],\n        listOfUris: []\n      })\n    })\n    setInterval(() => {\n      window.location.reload()\n    }, 1000);\n  }\n\n  getPlaylists() {\n    Spotify.getPlaylists().then(results => {\n      this.setState({\n        playlists: results\n      })\n    })\n  }\n\n  getPlaylistInfo(playlist) {\n    Spotify.getPlaylistInfo(playlist).then(result => {\n      this.setState({\n        existingPlaylistInfo: result,\n        tracks: []\n      })\n    })\n  }\n\n  clearCurrent() {\n    this.setState({\n      existingPlaylistInfo: []\n    })\n  }\n\n  // Gets Spotify access token \n  componentDidMount() {\n    window.addEventListener('load', () => { Spotify.getAccessToken() });\n  }\n\n  render() {\n    return (\n      <>\n        <Header\n          menuToggle={this.state.menuToggle}\n          onclick={this.handleMenuToggle}\n        />\n        <MobileNav\n          playlists={this.state.playlists}\n          getPlaylists={this.getPlaylists}\n          getPlaylistInfo={this.getPlaylistInfo}\n          clear={this.clearCurrent}\n          menuToggle={this.state.menuToggle}\n          handleMenuToggle={this.handleMenuToggle}\n        />\n\n        <main className=\"main-area\">\n\n          <section className=\"playlist-section\">\n            <div className=\"container\">\n              <Playlist\n                playlists={this.state.playlists}\n                getPlaylists={this.getPlaylists}\n                getPlaylistInfo={this.getPlaylistInfo}\n                clear={this.clearCurrent}\n              />\n            </div>\n            <div className=\"border-right\"></div>\n          </section>\n\n          <section className=\"searchresults-section\">\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <SearchResults\n                    tracks={this.state.tracks}\n                    addTrack={this.addTrack}\n                    search={this.searchTrack}\n                  />\n                  <NewPlaylist\n                    playlist={this.state.playlistName}\n                    playlistTracks={this.state.playlistTracks}\n                    handleNameChange={this.handleNameChange}\n                    removeTrack={this.removeTrack}\n                    savePlaylist={this.savePlaylist}\n                    listOfUris={this.state.listOfUris}\n                  />\n                </Route>\n                <Route path=\"/playlistname\">\n                  <ExistingPlaylist\n                    info={this.state.existingPlaylistInfo}\n                    removeTrack={this.removeTrack}\n                    savePlaylist={this.savePlaylist}\n                    listOfUris={this.state.listOfUris}\n                  />\n                </Route>\n              </Switch>\n            </div>\n          </section>\n\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter as Router} from 'react-router-dom'\nimport App from './App';\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}